{"version":3,"sources":["index.js"],"names":["a","stats","Stats","showPanel","document","body","appendChild","dom","scene","THREE","aspectRatio","window","innerWidth","innerHeight","cameraHeight","cameraWidth","modelLoader","GLTFLoader","loadAsync","knightContainer","knight","camera","position","set","lookAt","renderer","setSize","domElement","light","add","directionalLight","boxGeometry","material","color","leftWall","scale","z","rightWall","topWall","x","bottomWall","planeGeometry","planeMaterial","plane","rotation","Math","PI","grid","y","models","knightClips","animations","center","i","model","SkeletonUtils","random","animationMixer","clip","findByName","clipAction","play","vel","rotateAround","push","animate","requestAnimationFrame","delta","begin","update","angle","render","end","init"],"mappings":"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","file":"static/js/main.962869b4.chunk.js","sourcesContent":["import \"./index.css\";\n\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport * as SkeletonUtils from \"three/examples/jsm/utils/SkeletonUtils\";\n\nimport * as Stats from \"stats.js\";\n\nconst init = async () => {\n  var stats = new Stats();\n  stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n  document.body.appendChild(stats.dom);\n\n  const scene = new THREE.Scene();\n  const aspectRatio = window.innerWidth / window.innerHeight;\n  const cameraWidth = 20;\n  const cameraHeight = cameraWidth / aspectRatio;\n\n  const modelLoader = new GLTFLoader();\n  const knightContainer = await modelLoader.loadAsync(\"./KnightCharacter.gltf\");\n\n  const knight = knightContainer.scene;\n\n  // const loader = new THREE.TextureLoader();\n  // const treeTexture = await loader.loadAsync(\"./tree.jpg\");\n\n  const camera = new THREE.OrthographicCamera(\n    cameraWidth / -2, // left\n    cameraWidth / 2, // right\n    cameraHeight / 2, // top\n    cameraHeight / -2, // bottom\n    0, // near plane\n    700 // far plane\n  );\n\n  camera.position.set(0, 5, 3);\n  camera.lookAt(0, 0, 0);\n\n  const renderer = new THREE.WebGLRenderer();\n\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n\n  const light = new THREE.AmbientLight(0xffffff, 0.6); // soft white light\n  scene.add(light);\n\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n  scene.add(directionalLight);\n\n  const boxGeometry = new THREE.BoxGeometry();\n  const material = new THREE.MeshStandardMaterial({\n    color: 0x0095dd,\n  });\n\n  const leftWall = new THREE.Mesh(boxGeometry, material);\n  leftWall.scale.z = 10;\n  leftWall.position.set(-0.5 - 5, 0.5, 0);\n  scene.add(leftWall);\n\n  const rightWall = new THREE.Mesh(boxGeometry, material);\n  rightWall.scale.z = 10;\n  rightWall.position.set(0.5 + 5, 0.5, 0);\n  scene.add(rightWall);\n\n  const topWall = new THREE.Mesh(boxGeometry, material);\n  topWall.scale.x = 10;\n  topWall.position.set(0, 0.5, -5 - 0.5);\n  scene.add(topWall);\n\n  const bottomWall = new THREE.Mesh(boxGeometry, material);\n  bottomWall.scale.x = 10;\n  bottomWall.position.set(0, 0.5, 5 + 0.5);\n  scene.add(bottomWall);\n\n  // cube.position.set(0.5, 0.5, 0.5);\n\n  const planeGeometry = new THREE.PlaneGeometry(10, 10);\n  const planeMaterial = new THREE.MeshStandardMaterial({\n    color: 0x999999,\n  });\n  const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n  plane.rotation.x = -Math.PI / 2;\n  scene.add(plane);\n\n  camera.position.z = 2.5;\n\n  // const treeMaterial = new THREE.SpriteMaterial({ map: treeTexture });\n\n  // const sprite = new THREE.Sprite(treeMaterial);\n  // sprite.center.set(0.5, 0);\n  // sprite.position.set(0, 0, 1.5);\n  // scene.add(sprite);\n\n  var grid = new THREE.GridHelper(10, 10);\n  grid.position.y += 0.01;\n  scene.add(grid);\n  const models = [];\n\n  const knightClips = knightContainer.animations;\n  const center = new THREE.Vector2(0, 0);\n\n  for (let i = 0; i < 150; i++) {\n    const model = SkeletonUtils.clone(knight);\n    model.scale.set(0.3, 0.3, 0.3);\n    model.position.set(Math.random() * 10 - 5, 0, Math.random() * 10 - 5);\n    model.animationMixer = new THREE.AnimationMixer(model);\n\n    const clip = THREE.AnimationClip.findByName(knightClips, \"Run\");\n\n    model.animationMixer.clipAction(clip).play();\n    const vel = new THREE.Vector2(2, 0);\n    vel.rotateAround(center, Math.random() * Math.PI * 2);\n    model.vel = vel;\n\n    models.push(model);\n\n    scene.add(model);\n  }\n\n  // let speedZ = 0.01;\n  // let posZ = sprite.position.z;\n  const animate = function () {\n    requestAnimationFrame(animate);\n    const delta = 0.015;\n\n    // if (posZ > 3) {\n    //   speedZ = -0.01;\n    // } else if (posZ < -1) {\n    //   speedZ = 0.01;\n    // }\n    // posZ += speedZ;\n    // sprite.position.z = Math.round(posZ);\n    stats.begin();\n    for (let model of models) {\n      model.position.x += model.vel.x * delta;\n      model.position.z += model.vel.y * delta;\n\n      if (model.position.x >= 5 || model.position.x <= -5) {\n        model.vel.x *= -1;\n      }\n      if (model.position.z >= 5 || model.position.z <= -5) {\n        model.vel.y *= -1;\n      }\n      model.animationMixer.update(delta);\n\n      model.rotation.y = Math.PI / 2 - model.vel.angle();\n    }\n\n    renderer.render(scene, camera);\n    stats.end();\n  };\n\n  animate();\n};\n\ninit();\n"],"sourceRoot":""}